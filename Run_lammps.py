#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb  8 09:33:11 2019

@author: christoph
"""

from lammps import lammps
import os
import shutil

class Run_lammps():
    def __init__(self,path,master):
        self.path=path
        self.master=master       
        self.energy=-1
        shutil.copy(os.path.dirname(__file__)+'/in.grGB',self.path+'in.grGB')
        self.lmps=lammps(cmdargs=('-log v2.log -screen none').split())
        #self.lmps=lammps()
        self.init()
        
    
    def init(self):      
        self.write_lammpsdatafile()
        self.lmps.command('read_data '+self.path+ 'modelmaster.data')
        self.lmps.file(self.path+'in.grGB')
        self.get_energy()
        
    def get_modelparam(self):
        count=0
        for at in self.master.atoms:
            if at.member:
                count+=1
                at.lammpsid=count   
            
    def get_energy(self):
        self.lmps.command('print \"%% Energy = ${teng}\"')
        self.energy=self.lmps.extract_variable('teng',0,0)
        return self.energy
    
    def compute_energy(self):
        self.lmps.command('run 0')
        self.lmps.command('variable teng equal c_eatoms')
        self.lmps.command('print \"%% Energy = ${teng}\"')
        self.get_energy()
    
    def set_position(self,atomid,x,y,z,update_energy=True):
        self.scale=self.master.views[0].fov*10/self.master.views[0].imageWidth
        #self.lmps.command('group atomi id '+str(atomid+1))
        self.lmps.command('set atom '+str(atomid)+' x '+str(x*self.scale)+' y '+str(y*self.scale)+' z '+str(z*self.scale))
        if update_energy:
            self.compute_energy()
    
    def update_positions(self):
        self.scale=self.master.views[0].fov*10/self.master.views[0].imageWidth
        for at in self.master.atoms:
            if at.member:
                #self.lmps.command('group atomi id '+str(at.lammpsid+1))
                self.lmps.command('set atom '+str(at.lammpsid)+' x '+str(at.x*self.scale)+' y '+str(at.y*self.scale)+' z '+str(at.z*self.scale))
        self.compute_energy()
        
    def write_lammpsdatafile(self):
        self.get_modelparam()
        self.scale=self.master.views[0].fov*10/self.master.views[0].imageWidth
        
        with open('modelmaster.data','w') as f:
            f.write('LAMMPS data file. CGCMM style. atom_style atomic generated by Run_lammps.py\n\n')
            f.write(str(self.master.totalnumber)+' atoms\n')
            f.write('0 bonds\n');
            f.write('0 angles\n');
            f.write('0 dihedrals\n');
            f.write('0 impropers\n');
            f.write('1 atom types\n');
            f.write('0 bond types\n');
            f.write('0 angle types\n');
            f.write('0 dihedral types\n');
            f.write('0 improper types\n');
            f.write('-10 200  xlo xhi\n');
            f.write('-0.500000 200  ylo yhi\n');
            f.write('-100 100  zlo zhi\n');
            f.write('\n');
            f.write('# Pair Coeffs\n');
            f.write('#\n');
            f.write('# 1  C\n');
            f.write('\n');
            f.write('Masses\n');
            f.write('\n');
            f.write('1 12.010700 # C\n');
            f.write('\n');
            f.write('Atoms # atomic\n')
            f.write('\n')
            for at in self.master.atoms:
                if at.member:
                    f.write(str(at.lammpsid)+' 1 '+' '+str(at.x*self.scale)+' '+str(at.y*self.scale)+' '+str(at.z*self.scale)+'\n')
#            counter=1
#            f.write('\nBonds # harmonic\n')
#            f.write('\n')
#            for bond in self.master.bonds:
#                f.write(str(counter)+' harmonic '+str(bond.a1.lammpsid)+' '+str(bond.a2.lammpsid)+'\n')
#                counter+=1
                    
          
    def init_simulation(self):
        pass
                
if __name__=='__main__':  
    lammps()
    #print(lmps.installed_packages)

